name: Updating SoccerScrapingAnalytics library

on:
  # Automatique pour feature/* après build réussi
  workflow_run:
    workflows: ["Build SoccerScrapingAnalytics library"]
    types:
      - completed
  # Manuel pour main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_version:
    runs-on: ubuntu-latest
    if: |
      # Si manuel (main) OU push automatique sur feature/* après build réussi
      github.event_name == 'workflow_dispatch' || startsWith(github.head_ref, 'feature/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine new version
        run: |
          # Récupère dernier tag release
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          last_tag=${last_tag#v}  # retirer le 'v'
          IFS='.' read -r major minor patch <<< "$last_tag"

          if [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # Main : incrément patch
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          else
            # Feature : snapshot basé sur dernier tag
            new_version="$major.$minor.$patch-snapshot"
          fi

          tag_version="v$new_version"
          echo "New version: $new_version"
          echo "Tag version: $tag_version"

          # Met à jour la version dans le fichier setup.py
          sed -i "s/version='[^']*'/version='$new_version'/" setup.py

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit et push
          git add setup.py
          git commit -m "Update version to $new_version"
          git tag "$tag_version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$GITHUB_REF
          git push --tags
