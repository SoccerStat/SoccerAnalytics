name: Build and Update SoccerScrapingAnalytics library

on:
  push:
    branches:
      - "feature/*"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build_check.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: make lint

      - name: Mark build success
        id: build_check
        run: echo "done"

  update_version:
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine new version
        run: |
          # Retrieve the last release tag
          last_tag=$(git tag --list "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          last_tag=${last_tag#v} # To remove the 'v' in front of the tag
          echo "Current version: $last_tag"
          IFS='.' read -r major minor patch <<< "$last_tag"

          if [[ "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # Main : patch increment
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          else
            # Feature : snapshot based on the last tag release
            new_version="$major.$minor.$patch-snapshot"
          fi

          tag_version="v$new_version"
          echo "New version: $new_version"
          echo "Tag version: $tag_version"

          # Update the tag in setup.py
          sed -i "s/version='[^']*'/version='$new_version'/" setup.py

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Commit and push
          git add setup.py
          git commit -m "Update version to $new_version" || echo "No changes to commit"

          # Vérifie si le tag existe déjà avant de le créer
          if git rev-parse "$tag_version" >/dev/null 2>&1; then
            echo "Tag $tag_version already exists, skipping tag creation."
          else
            git tag "$tag_version"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$GITHUB_REF
            git push --tags
          fi

  # Job pour bloquer push direct sur main (optionnel)
  block_direct_main_push:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Block direct push to main
        run: |
          echo "❌ Direct pushes t   o main are not allowed. Please open a Pull Request."
          exit 1
