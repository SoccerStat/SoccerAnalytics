name: Build and Update SoccerScrapingAnalytics

on:
  push:
    branches:
      - "feature/*"    # build uniquement
      - "main"         # build après merge
  pull_request:
    branches:
      - "main"         # build + update version pour PR
  workflow_dispatch:    # update manuelle si besoin

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: make lint

  update_version:
    needs: build
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Determine new version
        run: |
          # Récupérer le dernier tag release (ignorer les snapshots)
          last_tag=$(git tag --list "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          last_tag=${last_tag#v}
          echo "Current version: $last_tag"
          IFS='.' read -r major minor patch <<< "$last_tag"

          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # Main manuel : incrément patch
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          else
            # PR : snapshot basé sur le dernier tag release
            new_version="$major.$minor.$patch-snapshot"
          fi

          tag_version="v$new_version"
          echo "New version: $new_version"
          echo "Tag version: $tag_version"

          # Mettre à jour setup.py
          sed -i "s/version='[^']*'/version='$new_version'/" setup.py

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git pull

          # Commit si nécessaire
          git add setup.py
          git commit -m "Update version to $new_version" || echo "No changes to commit"

          # Push on the feature branch
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            # PR : push on the source branch
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$GITHUB_HEAD_REF
          else
            # main or workflow_dispatch
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$GITHUB_REF
          fi

          # Create the tag only if it doesn't exist yet
          if git rev-parse "$tag_version" >/dev/null 2>&1; then
            echo "Tag $tag_version already exists, skipping tag creation."
          else
            git tag "$tag_version"
            git push --tags
          fi
