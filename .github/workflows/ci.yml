name: Build and Update SoccerAnalytics

on:
  push:
    branches:
      - "feature/*"    # Classic build sur feature
      - "main"         # Auto. build after merge
  pull_request:
    branches:
      - "main"         # PR main → snapshot
  workflow_dispatch:   # Manual Main → patch update

permissions:
  contents: write   # for push and tag

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: make lint

  update_version:
    needs: build
    if: ${{ github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Generate GitHub App token
        id: get_app_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Determine new version
        id: determine_version
        run: |
          # Retrieve the last release tag (ignore snapshots)
          last_tag=$(git tag --list "v*" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          last_tag=${last_tag#v}
          echo "Current version: $last_tag"
          IFS='.' read -r major minor patch <<< "$last_tag"

          # Determine the new version
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            # Manual Main: patch increment
            patch=$((patch + 1))
            new_version="$major.$minor.$patch"
          else
            # PR : snapshot based on the last release tag
            new_version="$major.$minor.$patch-snapshot"
          fi

          echo "tag_version=v$new_version" >> $GITHUB_OUTPUT
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Bump version and commit
        run: |
          git config user.name "github-app[bot]"
          git config user.email "github-app[bot]@users.noreply.github.com"

          # Update setup.py
          sed -i "s/version='[^']*'/version='${{ steps.determine_version.outputs.new_version }}'/" setup.py
          git add setup.py
          git commit -m "Release: bump version to ${{ steps.determine_version.outputs.new_version }}" || echo "No changes to commit"

          # Push commit direct sur main via le token de l'App
          git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/${{ github.repository }} HEAD:main

      - name: Delete old snapshot tag if exists
        run: |
          if [[ "${{ steps.determine_version.outputs.new_version }}" == *"-snapshot" ]]; then
            if git rev-parse "${{ steps.determine_version.outputs.tag_version }}" >/dev/null 2>&1; then
              git tag -d "${{ steps.determine_version.outputs.tag_version }}"
              git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/${{ github.repository }} --delete "${{ steps.determine_version.outputs.tag_version }}"
            fi
          fi

      - name: Create and push tag
        run: |
          git tag -f "${{ steps.determine_version.outputs.tag_version }}"
          git push https://x-access-token:${{ steps.get_app_token.outputs.token }}@github.com/${{ github.repository }} --tags
