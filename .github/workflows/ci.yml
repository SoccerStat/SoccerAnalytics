name: Building / Updating SoccerAnalytics library

on:
  push:
    branches: 
      - "main"
      - "feature/*"
  pull_request:
    branches: 
      - "main"
  workflow_dispatch:
    inputs:
      version_update:
        required: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: make lint
      
    # - name: Run tests with pytest
    #   run: make test
  
  update_version:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'workflow_dispatch' && needs.build.result == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version in setup.py
      run: |
        # Récupérer la version courante depuis le fichier setup.py
        current_version=$(grep "version=" setup.py | sed -E "s/.*version='([^']+)'.*/\1/")
        
        # Diviser la version en major, minor, patch
        IFS='.' read -r major minor patch <<< "$current_version"
        
        # Si on est sur la branche 'main', incrémenter la version PATCH
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
          patch=$((patch + 1))
          new_version="$major.$minor.$patch"
          tag_version="v$new_version"
        else
          # Sinon, ajouter '-snapshot' à la version
          new_version="$current_version-snapshot"
          tag_version="v$new_version"
        fi

        # Afficher la nouvelle version pour vérification
        echo "Current version: $current_version"
        echo "New version: $new_version"
        echo "Tag version: $tag_version"
        
        # Met à jour la version dans le fichier setup.py
        sed -i "s/version='[^']*'/version='$new_version'/" setup.py

        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Commit et push du changement de version
        git add setup.py
        git commit -m "Update version to $new_version"

          # Supprimer le tag distant s'il existe déjà
        if git ls-remote --tags origin | grep -q "refs/tags/$tag_version"; then
          echo "Tag $tag_version already exists. Deleting remote tag..."
          git push origin :refs/tags/$tag_version
        fi

        # (Re)Créer le tag local
        git tag "$tag_version"
        
        # Push les modifications et forcer le push du tag
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:$GITHUB_REF
        git push origin "$tag_version" --force
